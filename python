import os
import pandas as pd
from datetime import date
from dateutil.relativedelta import relativedelta
from openpyxl import load_workbook, Workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Ruta de los archivos CSV
carpeta = './'

fecha_mes_anterior = (date.today().replace(day=1) - relativedelta(months=1)).strftime("%d/%m/%Y")  # Fecha del mes con día 1

columnas_finales = [  # Columnas requeridas
    "ID_REG", "ID_ORG", "Fecha", "Organización", "ID_Cluster",
    "Total Attempted Messages", "Stopped Messages", "Clean Messages",
    "Stopped by Reputation Filtering", "Stopped as Invalid Recipients",
    "Spam Detected", "Virus Detected", "Detected by Advanced Malware Protection",
    "Stopped by Content Filter", "Messages with Malicious URLs", "Stopped by DMARC"
]

dataframes = []  # Inicia lista
id_reg = 1

for archivo in os.listdir(carpeta):  # Procesamos los archivos
    if archivo.endswith('.csv'):
        try:
            ruta = os.path.join(carpeta, archivo)
            df = pd.read_csv(ruta, header=0)  # Leer CSV con encabezado en la primera fila

            if df.shape[0] < 3:
                raise ValueError("CSV con menos de 3 filas")

            partes = archivo.split("_")  # Extraer Organización e ID_Cluster del nombre del archivo
            organizacion = partes[0].strip()
            id_cluster = partes[1] if len(partes) > 1 else ""
            id_org = ""

            fila3 = df.iloc[2]  # Fila 3 (índice 2) contiene los valores reales

            fila = {
                "ID_REG": id_reg,
                "ID_ORG": id_org,
                "Fecha": fecha_mes_anterior,
                "Organización": organizacion,
                "ID_Cluster": id_cluster,
                "Total Attempted Messages": fila3.get("Total Attempted Messages", 0),
                "Stopped Messages": fila3.get("Total Threat Messages", 0),
                "Clean Messages": fila3.get("Clean Messages", 0),
                "Stopped by Reputation Filtering": fila3.get("Stopped by IP Reputation Filtering", 0),
                "Stopped as Invalid Recipients": fila3.get("Stopped as Invalid Recipients", 0),
                "Spam Detected": fila3.get("Spam Detected", 0),
                "Virus Detected": fila3.get("Virus Detected", 0),
                "Detected by Advanced Malware Protection": fila3.get("Detected by Advanced Malware Protection", 0),
                "Stopped by Content Filter": fila3.get("Stopped by Content Filter", 0),
                "Messages with Malicious URLs": fila3.get("Messages with Malicious URLs", 0),
                "Stopped by DMARC": fila3.get("Stopped by DMARC", 0),
            }

            dataframes.append(pd.DataFrame([fila]))
            id_reg += 1

        except Exception as e:
            print(f"Error procesando {archivo}: {e}")

if dataframes:  # Unir y exportar
    df_final = pd.concat(dataframes, ignore_index=True)[columnas_finales]
    archivo_salida = "Informe_mensual.xlsx"
    hoja_destino = "Datos"

    if os.path.exists(archivo_salida):
        wb = load_workbook(archivo_salida)
        if hoja_destino in wb.sheetnames:
            ws = wb[hoja_destino]
            for row in ws.iter_rows(min_row=2, max_row=ws.max_row, max_col=ws.max_column):
                for cell in row:
                    cell.value = None
        else:
            ws = wb.create_sheet(hoja_destino)
    else:
        wb = Workbook()
        ws = wb.active
        ws.title = hoja_destino

    for r_idx, row in enumerate(dataframe_to_rows(df_final, index=False, header=True), 1):
        for c_idx, value in enumerate(row, 1):
            ws.cell(row=r_idx, column=c_idx, value=value)

    wb.save(archivo_salida)
    print("Archivo 'Informe_mensual.xlsx' actualizado")
else:
    print("No se encontraron archivos CSV válidos.")
